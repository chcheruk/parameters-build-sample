shared:
    image: node:8

parameters:
    region: "us-west-1"
    az:
        value: "1"
        description: "default availability zone"
    aws: 
        value: "Cloud Formation Template"
        description: "Default Cloud Formation Template"
    gcp: 
        value: "Google Cloud Deployment Template"
        description: "Default Google Cloud Deployment Template"

jobs:
    main:
        requires: [~pr, ~commit]
        steps:
            - step1: 'echo "Region: $(meta get parameters.region.value)"'
            - step2: 'echo "AZ: $(meta get parameters.az.value)"'
            - install: npm install screwdriver-template-main
            - validate: ./node_modules/.bin/template-validate
    publish:
        requires: [main]
        steps:
            - install: npm install screwdriver-template-main
            - publish: ./node_modules/.bin/template-publish --tag stable
    next:
        requires: [main]
        steps:
            - step1: 'echo "Region: $(meta get parameters.region.value)"'
            - step2: 'echo "AZ: $(meta get parameters.az.value)"'
    Pre-Setup:
        requires: [next]
        steps:
            - step1: 'echo "Region: $(meta get parameters.region.value)"'
            - step2: 'echo "AZ: $(meta get parameters.az.value)"'
    Bootstapping:
        requires: [Pre-Setup]
        steps:
            - step1: 'echo "Region: $(meta get parameters.region.value)"'
            - step2: 'echo "AZ: $(meta get parameters.az.value)"'
    AWS:
        requires: [Bootstapping]
        steps:
            - step1: 'echo "This is AWS Orchestration"'
            - step2: 'echo "AWS: $(meta get parameters.aws.value)"'
            - step3: 'echo "AWS: $(meta get parameters.aws.description)"'
    GCP:
        requires: [Bootstapping]
        steps:
            - step1: 'echo "This is GCP Orchestration"'
            - step2: 'echo "GCP: $(meta get parameters.gcp.value)"'
            - step3: 'echo "GCP: $(meta get parameters.gcp.description)"'
    ALL:
        requires: [GCP,AWS]
        steps:
            - step1: 'echo "This is GCP Orchestration"'
            - step2: 'echo "GCP: $(meta get parameters.gcp.value)"'
            - step3: 'echo "GCP: $(meta get parameters.gcp.description)"'
            
    # 1. Validate templates
    validate_templates:
        requires: [ALL]
        steps:
            - install_prerequisites: npm install -g screwdriver-template-main
            # a. Validate the default (golang/init) template
            - validate_default_template: template-validate
            # b. Validate the non-default (nodejs/test) template
            - validate_nodejs_template: |
                export SD_TEMPLATE_PATH=./nodejs.yaml
                template-validate
    # 2a. Publish and tag the golang template in one job
    # Note: We do not need to set SD_TEMPLATE_PATH since that template is in the default path (sd-template.yaml)
    publish_default_template:
        requires: [validate_templates]
        steps:
        - install_prerequisites: npm install -g screwdriver-template-main
        - publish:  template-publish
        - autotag: template-tag --name golang/init --tag latest

    # 2b. Publish the nodejs template and tag with "latest"
    # Note: Need to set SD_TEMPLATE_PATH since it is not at the default (sd-template.yaml)
    # The remote test starts after this job completes (https://github.com/screwdriver-cd-test/template-test-example)
    publish_nodejs_template:
        requires: [validate_templates]
        environment:
          SD_TEMPLATE_PATH: ./nodejs.yaml
        steps:
        - install_prerequisites: npm install -g screwdriver-template-main
        - publish:  template-publish
        - autotag: template-tag --name nodejs/staging --tag latest

      # 3. Promote the nodejs template with the "stable" tag
      # Only promotes if the remote test is successful
    promote_nodejs_template:
        requires: [~sd@1733:test_nodejs_template]
        environment:
          SD_TEMPLATE_PATH: ./nodejs.yaml
        steps:
        - install_prerequisites: npm install -g screwdriver-template-main
        - autotag: template-tag --name nodejs/production --tag stable
